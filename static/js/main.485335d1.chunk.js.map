{"version":3,"sources":["components/Filter.js","components/CheckedItemsButtons.js","components/Header.js","components/TableContext.js","components/PaginationSelector.js","components/Main.js","components/WithContext.js","components/PaginationButtons.js","components/config.js","App.js","serviceWorker.js","index.js"],"names":["Filter","_ref","onFilterInput","react_default","a","createElement","className","type","onChange","placeholder","CheckedItemsButtons","handleSelectedButtonClick","showSelectedButtonIsActive","classNames","button-active","onClick","Header","components_Filter","components_CheckedItemsButtons","TableContext","React","createContext","PaginationSelector","props","handlePaginationSelector","perPage","value","WithTableContext","Context","Component","Consumer","data","Object","assign","bind","Main","MainHeaderWithTableContext","MainContentWithTableContext","PaginationSelectorWithTableContext","handleCheckAll","checkedAll","config","handleOrderClick","checked","entries","map","_ref2","slicedToArray","key","sortableTitleClassName","main__table-sortable","propTypes","PropTypes","func","isRequired","bool","objectOf","shape","title","string","isSortable","isSearchable","hasImage","isEditable","Content","phones","togglePhoneCheckbox","phone","id","isChecked","keys","editableBlock","MainEditableBlockWithTableContext","MainCellWithTableContext","array","EditableBlock","handleEditableBlockBlur","handleSubmitEditing","editableFormValue","wasEdit","autoFocus","defaultValue","event","target","onBlur","onKeyDown","e","keyCode","onMouseDown","age","number","editableField","imageUrl","name","snippet","Cell","handleDoubleClick","editable-block","imageContent","src","concat","alt","onDoubleClick","element","PaginationButtons","totalPhonesCount","currentPage","handleClick","handleArrowClick","maxPage","newPage","Math","max","min","buttonsCount","ceil","buttons","count","i","push","generateButtons","firstItem","lastItem","disabled","button","buttonClassName","columnConfig","App","state","order","orderBy","filterValue","showSelected","isLoading","toConsumableArray","_this","phoneIndex","findIndex","objectSpread","setState","onOrderInput","newOrder","getNewOrder","selectPage","page","filteredPhones","getFilteredPhones","newPhones","getCurrentPagePhones","forEach","index","searchedPhone","itemIndex","_objectSpread2","defineProperty","_this2","this","fetch","then","response","json","dataWithCheckbox","addIsCheckedProperty","dataWithEditableField","addCurrentEditableField","items","item","sort","itemA","itemB","searchableParams","param","hasOwnProperty","_this$state","filterValueLower","toLowerCase","getSearchableParams","filter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","includes","err","return","filteredBySelection","filterBySelection","sortItems","_this3","_this$state2","every","allChecked","currentPagePhones","checkAllButtonsSelection","settings","getSettings","components_TableContext","Provider","Fragment","components_Header","components_Main","components_PaginationButtons","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.485335d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Filter = ({ onFilterInput }) => (\r\n  <div className=\"header__input\">\r\n    <input\r\n      type=\"text\"\r\n      onChange={onFilterInput}\r\n      placeholder=\"search...\"\r\n    />\r\n  </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n  onFilterInput: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CheckedItemsButtons = ({ handleSelectedButtonClick, showSelectedButtonIsActive }) => (\r\n  <div className=\"header__buttons\">\r\n    <button\r\n      className={classNames('button', {\r\n        'button-active': showSelectedButtonIsActive === false\r\n      })}\r\n      onClick={() => handleSelectedButtonClick(false)}\r\n    >\r\n      Show all\r\n    </button>\r\n    <button\r\n      className={classNames('button', {\r\n        'button-active': showSelectedButtonIsActive === true\r\n      })}\r\n      onClick={() => handleSelectedButtonClick(true)}\r\n    >\r\n      Show selected\r\n    </button>\r\n  </div>\r\n);\r\n\r\nCheckedItemsButtons.propTypes = {\r\n  handleSelectedButtonClick: PropTypes.func.isRequired,\r\n  showSelectedButtonIsActive: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default CheckedItemsButtons;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Filter from './Filter';\r\nimport CheckedItemsButtons from './CheckedItemsButtons';\r\n\r\nconst Header = ({onFilterInput, handleSelectedButtonClick, showSelectedButtonIsActive}) => (\r\n    <header className=\"header\">\r\n      <div className=\"container\">\r\n        <div className=\"header__content\">\r\n          <div className=\"header__logo\">\r\n            phones.ua\r\n          </div>\r\n          <Filter\r\n            onFilterInput={onFilterInput}\r\n          />\r\n          <CheckedItemsButtons\r\n            handleSelectedButtonClick={handleSelectedButtonClick}\r\n            showSelectedButtonIsActive={showSelectedButtonIsActive}\r\n          />\r\n        </div>\r\n      </div>\r\n    </header>\r\n);\r\n\r\nHeader.propTypes = {\r\n  onFilterInput: PropTypes.func.isRequired,\r\n  handleSelectedButtonClick: PropTypes.func.isRequired,\r\n  showSelectedButtonIsActive: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst TableContext = React.createContext();\r\n\r\nexport default TableContext;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst PaginationSelector = (props) => {\r\n  const {handlePaginationSelector, perPage} = props;\r\n\r\n  return (\r\n    <div className=\"pagination__selector\">\r\n      <select\r\n        onChange={handlePaginationSelector}\r\n        value={perPage}\r\n      >\r\n        <option value=\"3\">3</option>\r\n        <option value=\"5\">5</option>\r\n        <option value=\"10\">10</option>\r\n        <option value=\"15\">15</option>\r\n        <option value=\"20\">20</option>\r\n      </select>\r\n    </div>\r\n  )\r\n};\r\n\r\nPaginationSelector.propTypes = {\r\n  handlePaginationSelector: PropTypes.func.isRequired,\r\n  perPage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default PaginationSelector;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport TableContext from './TableContext';\r\nimport WithContext from './WithContext';\r\nimport PaginationSelector from \"./PaginationSelector\";\r\n\r\nconst WithTableContext = WithContext.bind(null, TableContext);\r\n\r\nconst IMAGE_BASE = 'https://raw.githubusercontent.com/TarSen99/DataTableComponent/master/';\r\n\r\nconst Main = () => (\r\n  <main className=\"main\">\r\n    <div className=\"container\">\r\n      <table className=\"main__table\">\r\n        <MainHeaderWithTableContext />\r\n        <MainContentWithTableContext />\r\n      </table>\r\n    </div>\r\n  </main>\r\n);\r\n\r\nconst PaginationSelectorWithTableContext = WithTableContext(PaginationSelector);\r\n\r\nMain.Header = (props) => {\r\n  const {handleCheckAll, checkedAll, config, handleOrderClick} = props;\r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <th>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={handleCheckAll}\r\n            checked={checkedAll}\r\n          />\r\n          <PaginationSelectorWithTableContext />\r\n        </th>\r\n        {\r\n          Object.entries(config).map(([key, value]) => {\r\n            const sortableTitleClassName = classNames({\r\n              'main__table-sortable': value['isSortable']\r\n            });\r\n\r\n            return (\r\n              <th\r\n                key={key}\r\n                className={sortableTitleClassName}\r\n                onClick={value['isSortable'] ? () => handleOrderClick(key) : null }\r\n              >\r\n                {value['title']}\r\n              </th>\r\n            );\r\n          })\r\n        }\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nMain.Header.propTypes = {\r\n  handleCheckAll: PropTypes.func.isRequired,\r\n  checkedAll: PropTypes.bool.isRequired,\r\n  handleOrderClick: PropTypes.func.isRequired,\r\n\r\n  config: PropTypes.objectOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string,\r\n      isSortable: PropTypes.bool,\r\n      isSearchable: PropTypes.bool,\r\n      hasImage: PropTypes.bool,\r\n      isEditable: PropTypes.bool,\r\n    })\r\n  ).isRequired,\r\n};\r\n\r\nMain.Content = (props) => {\r\n  const {phones, togglePhoneCheckbox, config } = props;\r\n\r\n  return (\r\n    <tbody>\r\n    {\r\n      phones.map(phone => {\r\n        return (\r\n          <tr key={phone.id}>\r\n            <th>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={phone.isChecked}\r\n                onChange={() => togglePhoneCheckbox(phone.id)}\r\n              />\r\n            </th>\r\n            {Object.keys(config).map(title => {\r\n              const editableBlock =\r\n                (\r\n                  <MainEditableBlockWithTableContext\r\n                    title={title}\r\n                    phone={phone}\r\n                  />\r\n                );\r\n\r\n              return (\r\n                <MainCellWithTableContext\r\n                  key={title}\r\n                  title={title}\r\n                  phone={phone}\r\n                  editableBlock={editableBlock}\r\n                />\r\n              )\r\n            })}\r\n          </tr>\r\n        );\r\n      })\r\n    }\r\n    </tbody>\r\n  );\r\n};\r\n\r\nMain.Content.propTypes = {\r\n  phones: PropTypes.array,\r\n  togglePhoneCheckbox: PropTypes.func.isRequired,\r\n\r\n  config: PropTypes.objectOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string,\r\n      isSortable: PropTypes.bool,\r\n      isSearchable: PropTypes.bool,\r\n      hasImage: PropTypes.bool,\r\n      isEditable: PropTypes.bool,\r\n    })\r\n  ),\r\n};\r\n\r\nMain.EditableBlock = (props) => {\r\n  const {handleEditableBlockBlur, handleSubmitEditing, phone, title} = props;\r\n\r\n  let editableFormValue = phone[title];\r\n  let wasEdit = false;\r\n\r\n  const onFieldChange = (event) => {\r\n    editableFormValue = event.target.value;\r\n    wasEdit = true;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <textarea\r\n        autoFocus\r\n        defaultValue={editableFormValue}\r\n        onChange={onFieldChange}\r\n        onBlur={() => handleEditableBlockBlur(phone.id)}\r\n        onKeyDown={(e) => e.keyCode === 13 ?\r\n          handleSubmitEditing(phone.id, title, editableFormValue, wasEdit) : null}\r\n        className=\"editable-block__text\"\r\n      />\r\n      <button\r\n        className=\"editable-block__button button\"\r\n        onMouseDown={() => handleSubmitEditing(phone.id, title, editableFormValue, wasEdit)}\r\n      >\r\n        OK\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nMain.EditableBlock.propTypes = {\r\n  handleEditableBlockBlur: PropTypes.func.isRequired,\r\n  handleSubmitEditing: PropTypes.func.isRequired,\r\n  title: PropTypes.string,\r\n  phone: PropTypes.shape({\r\n    age: PropTypes.number,\r\n    editableField: PropTypes.string,\r\n    id: PropTypes.string,\r\n    imageUrl: PropTypes.string,\r\n    isChecked: PropTypes.bool,\r\n    name: PropTypes.string,\r\n    snippet: PropTypes.string,\r\n  }).isRequired,\r\n};\r\n\r\nMain.Cell = (props) => {\r\n  const {config, handleDoubleClick, title, phone, editableBlock} = props;\r\n  const className = classNames({\r\n    'editable-block': config[title]['isEditable']\r\n  });\r\n\r\n  const imageContent = (\r\n    <img\r\n      src={`${IMAGE_BASE}${phone[title]}`}\r\n      alt={title}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <td\r\n      key={title}\r\n      onDoubleClick={config[title]['isEditable']\r\n        ? () => handleDoubleClick(phone.id, title) : null}\r\n      className={className}\r\n    >\r\n      {\r\n        (phone.editableField === title && editableBlock) ||\r\n        (config[title]['hasImage']\r\n          ? imageContent : phone[title])\r\n      }\r\n    </td>\r\n  );\r\n};\r\n\r\nMain.Cell.propTypes = {\r\n  handleDoubleClick: PropTypes.func.isRequired,\r\n  handleSubmitEditing: PropTypes.func.isRequired,\r\n  title: PropTypes.string,\r\n  editableBlock: PropTypes.element,\r\n\r\n  config: PropTypes.objectOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string,\r\n      isSortable: PropTypes.bool,\r\n      isSearchable: PropTypes.bool,\r\n      hasImage: PropTypes.bool,\r\n      isEditable: PropTypes.bool,\r\n    })\r\n  ).isRequired,\r\n\r\n  phone: PropTypes.shape({\r\n    age: PropTypes.number,\r\n    editableField: PropTypes.string,\r\n    id: PropTypes.string,\r\n    imageUrl: PropTypes.string,\r\n    isChecked: PropTypes.bool,\r\n    name: PropTypes.string,\r\n    snippet: PropTypes.string,\r\n  }).isRequired,\r\n};\r\n\r\n\r\nconst MainHeaderWithTableContext = WithTableContext(Main.Header);\r\nconst MainContentWithTableContext = WithTableContext(Main.Content);\r\nconst MainEditableBlockWithTableContext = WithTableContext(Main.EditableBlock);\r\nconst MainCellWithTableContext = WithTableContext(Main.Cell);\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nconst WithContext = (Context, Component) => {\r\n  return (props) => {\r\n    return (\r\n      <Context.Consumer>\r\n        {\r\n          data => {\r\n            return <Component {...props} {...data} />\r\n          }\r\n        }\r\n      </Context.Consumer>\r\n    );\r\n  }\r\n};\r\n\r\nexport default WithContext;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PaginationButtons = ({totalPhonesCount, currentPage, perPage, handleClick}) => {\r\n  const generateButtons = (count) => {\r\n    const buttons = [];\r\n\r\n    for(let i = 0; i < count; i++) {\r\n      buttons.push(i);\r\n    }\r\n\r\n    return buttons;\r\n  };\r\n\r\n  const getButtonsCount = () => {\r\n    return Math.ceil(totalPhonesCount / perPage);\r\n  };\r\n\r\n  const handleArrowClick = (value, maxPage) => {\r\n    let newPage = currentPage + value;\r\n\r\n    newPage = Math.max(0, newPage);\r\n    newPage = Math.min((maxPage - 1), newPage);\r\n\r\n    if(newPage === currentPage) {\r\n      return;\r\n    }\r\n\r\n    handleClick(newPage);\r\n  };\r\n\r\n  const buttonsCount = getButtonsCount();\r\n  const buttons = generateButtons(buttonsCount);\r\n\r\n  const firstItem = Math.min((currentPage * perPage + 1), totalPhonesCount);\r\n  const lastItem = Math.min((currentPage * perPage + perPage), totalPhonesCount);\r\n\r\n  return (\r\n    <div className=\"pagination\">\r\n      <div className=\"container\">\r\n        <div className=\"pagination__block\">\r\n          <div className=\"pagination__text\">\r\n            <span className=\"pagination__current-items\">\r\n              {\r\n                `${firstItem} - ${lastItem} `\r\n              }\r\n            </span>\r\n            of\r\n            <span className=\"pagination__total-items\">\r\n              {` ${totalPhonesCount}`}\r\n            </span>\r\n          </div>\r\n          <div className=\"pagination__buttons\">\r\n            <button\r\n              onClick={() => handleArrowClick(-1, buttonsCount)}\r\n              className=\"pagination__arrow button\"\r\n              disabled={currentPage === 0}\r\n            >\r\n              {'<'}\r\n            </button>\r\n            {\r\n              buttons.map((button) => {\r\n                const buttonClassName = classNames('button', {\r\n                  'button-active': button === currentPage\r\n                });\r\n\r\n                return (\r\n                  <button\r\n                    key={button}\r\n                    onClick={() => handleClick(button)}\r\n                    className={buttonClassName}\r\n                  >\r\n                    {button + 1}\r\n                  </button>\r\n                );\r\n              })\r\n            }\r\n            <button\r\n              onClick={() => handleArrowClick(1, buttonsCount)}\r\n              className=\"pagination__arrow button\"\r\n              disabled={currentPage === Math.max((buttonsCount - 1), 0)}\r\n            >\r\n              {'>'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nPaginationButtons.propTypes = {\r\n  totalPhonesCount: PropTypes.number.isRequired,\r\n  currentPage: PropTypes.number.isRequired,\r\n  perPage: PropTypes.number.isRequired,\r\n  handleClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PaginationButtons;","const columnConfig = {\r\n  imageUrl: {\r\n    hasImage: true,\r\n  },\r\n  name: {\r\n    title: 'Name',\r\n    isSortable: true,\r\n    isSearchable: true,\r\n  },\r\n  snippet: {\r\n    title: 'Description',\r\n    isSearchable: true,\r\n    isEditable: true,\r\n  },\r\n  age: {\r\n    title: 'Age',\r\n    isSortable: true,\r\n  },\r\n};\r\n\r\nexport default columnConfig;","import React, {Component} from 'react';\n\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport PaginationButtons from './components/PaginationButtons';\nimport columnConfig from './components/config';\nimport TableContext from './components/TableContext';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    phones: [],\n    order: 'DESC',\n    orderBy: '',\n    filterValue: '',\n    currentPage: 0,\n    perPage: 3,\n    showSelected: false,\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    fetch('https://mate-academy.github.io/phone-catalogue-static/phones/phones.json')\n      .then(response => response.json())\n      .then(data => {\n        const dataWithCheckbox = this.addIsCheckedProperty(data);\n        const dataWithEditableField = this.addCurrentEditableField(dataWithCheckbox);\n\n        this.setState({\n          phones: dataWithEditableField,\n          isLoading: false,\n        })\n      });\n  }\n\n  addIsCheckedProperty(items) {\n    return items.map(item => (\n      {\n        ...item,\n        isChecked: false,\n      }\n    ));\n  }\n\n  addCurrentEditableField(items) {\n    return items.map(item => (\n      {\n        ...item,\n        editableField: null,\n      }\n    ));\n  }\n\n  togglePhoneCheckbox = (id) => {\n    const phones = [...this.state.phones];\n    const phoneIndex = phones.findIndex(phone => phone.id === id);\n\n    phones[phoneIndex] = {\n      ...phones[phoneIndex],\n      isChecked: !phones[phoneIndex].isChecked,\n    };\n\n    this.setState({\n      phones,\n    });\n  };\n\n  onOrderInput = (orderBy) => {\n    const newOrder = this.state.orderBy === orderBy\n      ? this.getNewOrder() : this.state.order;\n\n    this.setState({\n      order: newOrder,\n      orderBy: orderBy,\n    });\n  };\n\n  getNewOrder() {\n    return this.state.order === 'ASC' ? 'DESC' : 'ASC';\n  }\n\n  sortItems(phones, orderBy, order) {\n    return phones.sort((itemA, itemB) => {\n      if (order === 'ASC') {\n        return itemA[orderBy] > itemB[orderBy] ? 1 : -1\n      }\n\n      return itemA[orderBy] > itemB[orderBy] ? -1 : 1\n    });\n  }\n\n  onFilterInput = (event) => {\n    const filterValue = event.target.value;\n\n    this.setState({\n      currentPage: 0,\n      filterValue,\n    });\n  };\n\n  getSearchableParams(config) {\n    const searchableParams = [];\n\n    for(let param in config) {\n      if(!config.hasOwnProperty(param)) {\n        return;\n      }\n\n      if(columnConfig[param]['isSearchable']) {\n        searchableParams.push(param);\n      }\n    }\n\n    return searchableParams;\n  }\n\n  getFilteredPhones() {\n    const {phones, filterValue, orderBy, order} = this.state;\n    const filterValueLower = filterValue.toLowerCase();\n    const searchableParams = this.getSearchableParams(columnConfig);\n\n    const filteredPhones = phones.filter(phone => {\n      for(let searchableParam of searchableParams) {\n        if(phone[searchableParam].toLowerCase().includes(filterValueLower)) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n\n    const filteredBySelection = this.filterBySelection(filteredPhones);\n    const orderedPhones = this.sortItems(filteredBySelection, orderBy, order);\n\n    return orderedPhones;\n  }\n\n  filterBySelection(phones) {\n    if(this.state.showSelected === false) {\n      return phones;\n    }\n\n    return phones.filter(phone => {\n      return phone.isChecked === this.state.showSelected;\n    });\n  }\n\n  getCurrentPagePhones(phones) {\n    const {currentPage, perPage} = this.state;\n\n    return phones.filter((phone, index) => {\n      return index >= currentPage * perPage && index < currentPage * perPage + perPage\n    });\n  }\n\n  selectPage = (page) => {\n    this.setState({\n      currentPage: page,\n    })\n  };\n\n  handlePaginationSelector = (event) => {\n    const perPage = +event.target.value;\n\n    this.setState({\n      currentPage: 0,\n      perPage\n    })\n  };\n\n  handleSelectedButtonClick = (value) => {\n    this.setState({\n      currentPage: 0,\n      showSelected: value,\n    });\n  };\n\n  handleCheckAll = (event) => {\n    const value = event.target.checked;\n\n    const filteredPhones = this.getFilteredPhones();\n    const currentPagePhones = [...this.getCurrentPagePhones(filteredPhones)];\n\n    const newPhones = currentPagePhones.map(phone => {\n      return {\n        ...phone,\n        isChecked: value,\n      }\n    });\n\n    this.setState(state => {\n      const phones = [...state.phones];\n      newPhones.forEach(({ id, isChecked }) => {\n        const index = phones.findIndex(searchedPhone => searchedPhone.id === id);\n\n        phones[index] = {\n          ...phones[index],\n          isChecked,\n        }\n      });\n\n      return {\n        phones,\n      }\n    });\n  };\n\n  checkAllButtonsSelection(phones) {\n    return phones.every(phone => phone.isChecked === true);\n  }\n\n  handleDoubleClick = (id, title) => {\n    this.setState(state => {\n      const phones = [...state.phones];\n      const itemIndex = phones.findIndex( phone => phone.id === id);\n\n      phones[itemIndex] = {\n        ...phones[itemIndex],\n        editableField: title,\n      };\n\n      return {\n        phones,\n      }\n    });\n  };\n\n  handleSubmitEditing = (id, title, value, wasEdit) => {\n    this.setState(state => {\n      const phones = [...state.phones];\n      const itemIndex = phones.findIndex( phone => phone.id === id);\n\n      phones[itemIndex] = {\n        ...phones[itemIndex],\n        [title]: wasEdit ? value : phones[itemIndex][title],\n        editableField: null,\n      };\n\n      return {\n        phones,\n      }\n    });\n  };\n\n  handleEditableBlockBlur = (id) => {\n    this.setState(state => {\n      const phones = [...state.phones];\n      const itemIndex = phones.findIndex( phone => phone.id === id);\n\n      phones[itemIndex] = {\n        ...phones[itemIndex],\n        editableField: null,\n      };\n\n      return {\n        phones,\n      }\n    });\n  };\n\n  getSettings(phones, allChecked) {\n    return {\n      perPage: this.state.perPage,\n      handlePaginationSelector: this.handlePaginationSelector,\n      config: columnConfig,\n      phones: phones,\n      togglePhoneCheckbox: this.togglePhoneCheckbox,\n      handleOrderClick: this.onOrderInput,\n      handleCheckAll: this.handleCheckAll,\n      checkedAll: allChecked,\n      handleDoubleClick: this.handleDoubleClick,\n      handleSubmitEditing: this.handleSubmitEditing,\n      handleEditableBlockBlur: this.handleEditableBlockBlur,\n    };\n  }\n\n  render() {\n    const phones = this.getFilteredPhones();\n    const currentPagePhones = this.getCurrentPagePhones(phones);\n    const allChecked = this.checkAllButtonsSelection(currentPagePhones);\n\n    const settings = this.getSettings(currentPagePhones, allChecked);\n\n    return (\n      <TableContext.Provider value={settings}>\n        <React.Fragment>\n          <Header\n            onFilterInput={this.onFilterInput}\n            handleSelectedButtonClick={this.handleSelectedButtonClick}\n            showSelectedButtonIsActive={this.state.showSelected}\n          />\n          {\n            this.state.isLoading ? (\n              <div className=\"container\">Loading...</div>\n              )\n              : <>\n                  <Main />\n                  <PaginationButtons\n                    totalPhonesCount={phones.length}\n                    currentPage={this.state.currentPage}\n                    perPage={this.state.perPage}\n                    handleClick={this.selectPage}\n                  />\n              </>\n          }\n        </React.Fragment>\n      </TableContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}