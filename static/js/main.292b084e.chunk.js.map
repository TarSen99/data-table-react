{"version":3,"sources":["components/Filter.js","components/CheckedItemsButtons.js","components/Header.js","components/PaginationSelector.js","components/Main.js","components/PaginationButtons.js","components/config.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","react_default","a","createElement","className","type","onChange","onFilterInput","placeholder","CheckedItemsButtons","_ref","handleSelectedButtonClick","showSelectedButtonIsActive","classNames","button-active","onClick","Header","components_Filter","components_CheckedItemsButtons","PaginationSelector","handlePaginationSelector","perPage","value","Main","checkedAll","handleCheckAll","phones","handleOrderClick","togglePhoneCheckbox","config","handleDoubleClick","handleSubmitEditing","handleEditableBlockBlur","Content","_ref2","checked","components_PaginationSelector","Object","entries","map","_ref3","_ref4","slicedToArray","key","sortableTitleClassName","main__table-sortable","_ref5","phone","id","isChecked","keys","title","editableBlock","Main_Main","EditableBlock","Cell","_ref6","editableFormValue","wasEdit","defaultValue","event","target","onBlur","autoFocus","onKeyDown","e","keyCode","onMouseDown","_ref7","onDoubleClick","editable-block","editableField","src","concat","alt","PaginationButtons","totalPhonesCount","currentPage","handleClick","handleArrowClick","maxPage","newPage","Math","max","min","buttonsCount","ceil","buttons","count","i","push","generateButtons","firstItem","lastItem","disabled","button","buttonClassName","columnConfig","imageUrl","hasImage","name","isSortable","isSearchable","snippet","isEditable","age","App","state","order","orderBy","filterValue","showSelected","toConsumableArray","_this","phoneIndex","findIndex","objectSpread","setState","onOrderInput","newOrder","getNewOrder","selectPage","page","filteredPhones","getFilteredPhones","newPhones","getCurrentPagePhones","forEach","index","searchedPhone","itemIndex","_objectSpread2","defineProperty","_this2","this","fetch","then","response","json","data","dataWithCheckbox","addIsCheckedProperty","dataWithEditableField","addCurrentEditableField","items","item","sort","itemA","itemB","searchableParams","param","hasOwnProperty","_this$state","filterValueLower","toLowerCase","getSearchableParams","filter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","includes","err","return","filteredBySelection","filterBySelection","sortItems","_this3","_this$state2","every","currentPagePhones","allChecked","checkAllButtonsSelection","Fragment","components_Header","components_Main","components_PaginationButtons","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.292b084e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Filter = (props) => (\r\n  <div className=\"header__input\">\r\n    <input\r\n      type=\"text\"\r\n      onChange={props.onFilterInput}\r\n      placeholder=\"search...\"\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default Filter;","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst CheckedItemsButtons = ({ handleSelectedButtonClick, showSelectedButtonIsActive }) => (\r\n  <div className=\"header__buttons\">\r\n    <button\r\n      className={classNames('button', {\r\n        'button-active': showSelectedButtonIsActive === false\r\n      })}\r\n      onClick={() => handleSelectedButtonClick(false)}\r\n    >\r\n      Show all\r\n    </button>\r\n    <button\r\n      className={classNames('button', {\r\n        'button-active': showSelectedButtonIsActive === true\r\n      })}\r\n      onClick={() => handleSelectedButtonClick(true)}\r\n    >\r\n      Show selected\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default CheckedItemsButtons;","import React from 'react';\r\nimport Filter from './Filter';\r\nimport CheckedItemsButtons from './CheckedItemsButtons';\r\n\r\nconst Header = ({onFilterInput, handleSelectedButtonClick, showSelectedButtonIsActive}) => (\r\n    <header className=\"header\">\r\n      <div className=\"container\">\r\n        <div className=\"header__content\">\r\n          <div className=\"header__logo\">\r\n            phones.ua\r\n          </div>\r\n          <Filter\r\n            onFilterInput={onFilterInput}\r\n          />\r\n          <CheckedItemsButtons\r\n            handleSelectedButtonClick={handleSelectedButtonClick}\r\n            showSelectedButtonIsActive={showSelectedButtonIsActive}\r\n          />\r\n        </div>\r\n      </div>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst PaginationSelector = ({ handlePaginationSelector, perPage }) => {\r\n  return (\r\n    <div className=\"pagination__selector\">\r\n        <select\r\n          onChange={handlePaginationSelector}\r\n          value={perPage}\r\n        >\r\n          <option value=\"3\">3</option>\r\n          <option value=\"5\">5</option>\r\n          <option value=\"10\">10</option>\r\n          <option value=\"15\">15</option>\r\n          <option value=\"20\">20</option>\r\n        </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaginationSelector;","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport PaginationSelector from \"./PaginationSelector\";\r\n\r\nconst IMAGE_BASE = 'https://raw.githubusercontent.com/TarSen99/DataTableComponent/master/';\r\n\r\nconst Main = ({\r\n                checkedAll,\r\n                handleCheckAll,\r\n                phones,\r\n                handleOrderClick,\r\n                togglePhoneCheckbox,\r\n                config,\r\n                handlePaginationSelector,\r\n                perPage,\r\n                handleDoubleClick,\r\n                handleSubmitEditing,\r\n                handleEditableBlockBlur\r\n}) => (\r\n  <main className=\"main\">\r\n    <div className=\"container\">\r\n      <table className=\"main__table\">\r\n        <Main.Header\r\n          checkedAll={checkedAll}\r\n          handlePaginationSelector={handlePaginationSelector}\r\n          config={config}\r\n          handleOrderClick={handleOrderClick}\r\n          perPage={perPage}\r\n          handleCheckAll={handleCheckAll}\r\n        />\r\n        <Main.Content\r\n          config={config}\r\n          phones={phones}\r\n          togglePhoneCheckbox={togglePhoneCheckbox}\r\n          handleDoubleClick={handleDoubleClick}\r\n          handleSubmitEditing={handleSubmitEditing}\r\n          handleEditableBlockBlur={handleEditableBlockBlur}\r\n        />\r\n      </table>\r\n    </div>\r\n  </main>\r\n);\r\n\r\nMain.Header = ({checkedAll, handlePaginationSelector, config, handleOrderClick, perPage, handleCheckAll}) => (\r\n  <thead>\r\n  <tr>\r\n    <th>\r\n      <input\r\n        type=\"checkbox\"\r\n        onChange={handleCheckAll}\r\n        checked={checkedAll}\r\n      />\r\n      <PaginationSelector\r\n        handlePaginationSelector={handlePaginationSelector}\r\n        perPage={perPage}\r\n      />\r\n    </th>\r\n    {\r\n      Object.entries(config).map(([key, value]) => {\r\n        const sortableTitleClassName = classNames({\r\n          'main__table-sortable': value['isSortable']\r\n        });\r\n\r\n        return (\r\n          <th\r\n            key={key}\r\n            className={sortableTitleClassName}\r\n            onClick={value['isSortable'] ? () => handleOrderClick(key) : null }\r\n          >\r\n            {value['title']}\r\n          </th>\r\n        );\r\n      })\r\n    }\r\n  </tr>\r\n  </thead>\r\n);\r\n\r\nMain.Content = ({ phones, config, togglePhoneCheckbox,  handleDoubleClick, handleSubmitEditing, handleEditableBlockBlur}) => {\r\n  return (\r\n    <tbody>\r\n      {\r\n        phones.map(phone => {\r\n          return (\r\n            <tr key={phone.id}>\r\n              <th>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={phone.isChecked}\r\n                  onChange={() => togglePhoneCheckbox(phone.id)}\r\n                />\r\n              </th>\r\n              {Object.keys(config).map(title => {\r\n                const editableBlock =\r\n                  (\r\n                    <Main.EditableBlock\r\n                      handleEditableBlockBlur={handleEditableBlockBlur}\r\n                      handleSubmitEditing={handleSubmitEditing}\r\n                      title={title}\r\n                      phone={phone}\r\n                    />\r\n                );\r\n\r\n                return (\r\n                  <Main.Cell\r\n                    key={title}\r\n                    config={config}\r\n                    title={title}\r\n                    handleDoubleClick={handleDoubleClick}\r\n                    phone={phone}\r\n                    editableBlock={editableBlock}\r\n                  />\r\n                )\r\n              })}\r\n            </tr>\r\n          );\r\n        })\r\n      }\r\n    </tbody>\r\n  );\r\n};\r\n\r\nMain.EditableBlock = ({\r\n                        handleEditableBlockBlur,\r\n                        phone,\r\n                        handleSubmitEditing,\r\n                        title\r\n}) => {\r\n  let editableFormValue = phone[title];\r\n  let wasEdit = false;\r\n\r\n  const onFieldChange = (event) => {\r\n    editableFormValue = event.target.value;\r\n    wasEdit = true;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <textarea\r\n        className=\"editable-block__text\"\r\n        defaultValue={editableFormValue}\r\n        onChange={onFieldChange}\r\n        onBlur={() => handleEditableBlockBlur(phone.id)}\r\n        autoFocus\r\n        onKeyDown={(e) => e.keyCode === 13 ?\r\n          handleSubmitEditing(phone.id, title, editableFormValue, wasEdit) : null}\r\n      />\r\n      <button\r\n        className=\"editable-block__button button\"\r\n        onMouseDown={() => handleSubmitEditing(phone.id, title, editableFormValue, wasEdit)}\r\n      >\r\n        OK\r\n      </button>\r\n    </div>\r\n  )\r\n};\r\n\r\nMain.Cell = ({ config, title, handleDoubleClick, phone, editableBlock }) => (\r\n  <td\r\n    key={title}\r\n    onDoubleClick={config[title]['isEditable']\r\n      ? () => handleDoubleClick(phone.id, title) : null}\r\n    className={\r\n      classNames({\r\n        'editable-block': config[title]['isEditable']\r\n      })\r\n    }\r\n  >\r\n    {\r\n      (phone.editableField === title &&\r\n        editableBlock) ||\r\n      (config[title]['hasImage']\r\n        ? <img\r\n          src={`${IMAGE_BASE}${phone[title]}`}\r\n          alt={title}\r\n        />\r\n        : phone[title])\r\n    }\r\n  </td>\r\n);\r\n\r\nexport default Main;","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst PaginationButtons = ({totalPhonesCount, currentPage, perPage, handleClick}) => {\r\n  const generateButtons = (count) => {\r\n    const buttons = [];\r\n\r\n    for(let i = 0; i < count; i++) {\r\n      buttons.push(i);\r\n    }\r\n\r\n    return buttons;\r\n  };\r\n\r\n  const getButtonsCount = () => {\r\n    return Math.ceil(totalPhonesCount / perPage);\r\n  };\r\n\r\n  const handleArrowClick = (value, maxPage) => {\r\n    let newPage = currentPage + value;\r\n\r\n    newPage = Math.max(0, newPage);\r\n    newPage = Math.min((maxPage - 1), newPage);\r\n\r\n    if(newPage === currentPage) {\r\n      return;\r\n    }\r\n\r\n    handleClick(newPage);\r\n  };\r\n\r\n  const buttonsCount = getButtonsCount();\r\n  const buttons = generateButtons(buttonsCount);\r\n\r\n  const firstItem = Math.min((currentPage * perPage + 1), totalPhonesCount);\r\n  const lastItem = Math.min((currentPage * perPage + perPage), totalPhonesCount);\r\n\r\n  return (\r\n    <div className=\"pagination\">\r\n      <div className=\"container\">\r\n        <div className=\"pagination__block\">\r\n          <div className=\"pagination__text\">\r\n            <span className=\"pagination__current-items\">\r\n              {\r\n                `${firstItem} - ${lastItem} `\r\n              }\r\n            </span>\r\n            of\r\n            <span className=\"pagination__total-items\">\r\n              {` ${totalPhonesCount}`}\r\n            </span>\r\n          </div>\r\n          <div className=\"pagination__buttons\">\r\n            <button\r\n              onClick={() => handleArrowClick(-1, buttonsCount)}\r\n              className=\"pagination__arrow button\"\r\n              disabled={currentPage === 0}\r\n            >\r\n              {'<'}\r\n            </button>\r\n            {\r\n              buttons.map((button) => {\r\n                const buttonClassName = classNames('button', {\r\n                  'button-active': button === currentPage\r\n                });\r\n\r\n                return (\r\n                  <button\r\n                    key={button}\r\n                    onClick={() => handleClick(button)}\r\n                    className={buttonClassName}\r\n                  >\r\n                    {button + 1}\r\n                  </button>\r\n                );\r\n              })\r\n            }\r\n            <button\r\n              onClick={() => handleArrowClick(1, buttonsCount)}\r\n              className=\"pagination__arrow button\"\r\n              disabled={currentPage === Math.max((buttonsCount - 1), 0)}\r\n            >\r\n              {'>'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaginationButtons;","const columnConfig = {\r\n  imageUrl: {\r\n    hasImage: true,\r\n  },\r\n  name: {\r\n    title: 'Name',\r\n    isSortable: true,\r\n    isSearchable: true,\r\n  },\r\n  snippet: {\r\n    title: 'Description',\r\n    isSearchable: true,\r\n    isEditable: true,\r\n  },\r\n  age: {\r\n    title: 'Age',\r\n    isSortable: true,\r\n  },\r\n};\r\n\r\nexport default columnConfig;","import React, {Component} from 'react';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport PaginationButtons from './components/PaginationButtons';\nimport columnConfig from './components/config';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    phones: [],\n    order: 'DESC',\n    orderBy: '',\n    filterValue: '',\n    currentPage: 0,\n    perPage: 3,\n    showSelected: false,\n  };\n\n  componentDidMount() {\n    fetch('https://mate-academy.github.io/phone-catalogue-static/phones/phones.json')\n      .then(response => response.json())\n      .then(data => {\n        const dataWithCheckbox = this.addIsCheckedProperty(data);\n        const dataWithEditableField = this.addCurrentEditableField(dataWithCheckbox);\n\n        this.setState({\n          phones: dataWithEditableField,\n        })\n      });\n  }\n\n  addIsCheckedProperty(items) {\n    return items.map(item => (\n      {\n        ...item,\n        isChecked: false,\n      }\n    ));\n  }\n\n  addCurrentEditableField(items) {\n    return items.map(item => (\n      {\n        ...item,\n        editableField: null,\n      }\n    ));\n  }\n\n  togglePhoneCheckbox = (id) => {\n    const phones = [...this.state.phones];\n    const phoneIndex = phones.findIndex(phone => phone.id === id);\n\n    phones[phoneIndex] = {\n      ...phones[phoneIndex],\n      isChecked: !phones[phoneIndex].isChecked,\n    };\n\n    this.setState({\n      phones,\n    });\n  };\n\n  onOrderInput = (orderBy) => {\n    const newOrder = this.state.orderBy === orderBy\n      ? this.getNewOrder() : this.state.order;\n\n    this.setState({\n      order: newOrder,\n      orderBy: orderBy,\n    });\n  };\n\n  getNewOrder() {\n    return this.state.order === 'ASC' ? 'DESC' : 'ASC';\n  }\n\n  sortItems(phones, orderBy, order) {\n    return phones.sort((itemA, itemB) => {\n      if (order === 'ASC') {\n        return itemA[orderBy] > itemB[orderBy] ? 1 : -1\n      }\n\n      return itemA[orderBy] > itemB[orderBy] ? -1 : 1\n    });\n  }\n\n  onFilterInput = (event) => {\n    const filterValue = event.target.value;\n\n    this.setState({\n      currentPage: 0,\n      filterValue,\n    });\n  };\n\n  getSearchableParams(config) {\n    const searchableParams = [];\n\n    for(let param in config) {\n      if(!config.hasOwnProperty(param)) {\n        return;\n      }\n\n      if(columnConfig[param]['isSearchable']) {\n        searchableParams.push(param);\n      }\n    }\n\n    return searchableParams;\n  }\n\n  getFilteredPhones() {\n    const {phones, filterValue, orderBy, order} = this.state;\n    const filterValueLower = filterValue.toLowerCase();\n    const searchableParams = this.getSearchableParams(columnConfig);\n\n    const filteredPhones = phones.filter(phone => {\n      for(let searchableParam of searchableParams) {\n        if(phone[searchableParam].toLowerCase().includes(filterValueLower)) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n\n    const filteredBySelection = this.filterBySelection(filteredPhones);\n    const orderedPhones = this.sortItems(filteredBySelection, orderBy, order);\n\n    return orderedPhones;\n  }\n\n  filterBySelection(phones) {\n    if(this.state.showSelected === false) {\n      return phones;\n    }\n\n    return phones.filter(phone => {\n      return phone.isChecked === this.state.showSelected;\n    });\n  }\n\n  getCurrentPagePhones(phones) {\n    const {currentPage, perPage} = this.state;\n\n    return phones.filter((phone, index) => {\n      return index >= currentPage * perPage && index < currentPage * perPage + perPage\n    });\n  }\n\n  selectPage = (page) => {\n    this.setState({\n      currentPage: page,\n    })\n  };\n\n  handlePaginationSelector = (event) => {\n    const perPage = +event.target.value;\n\n    this.setState({\n      currentPage: 0,\n      perPage\n    })\n  };\n\n  handleSelectedButtonClick = (value) => {\n    this.setState({\n      currentPage: 0,\n      showSelected: value,\n    });\n  };\n\n  handleCheckAll = (event) => {\n    const value = event.target.checked;\n\n    const filteredPhones = this.getFilteredPhones();\n    const currentPagePhones = [...this.getCurrentPagePhones(filteredPhones)];\n\n    const newPhones = currentPagePhones.map(phone => {\n      return {\n        ...phone,\n        isChecked: value,\n      }\n    });\n\n    this.setState(state => {\n      const phones = [...state.phones];\n      newPhones.forEach(({ id, isChecked }) => {\n        const index = phones.findIndex(searchedPhone => searchedPhone.id === id);\n\n        phones[index] = {\n          ...phones[index],\n          isChecked,\n        }\n      });\n\n      return {\n        phones,\n      }\n    });\n  };\n\n  checkAllButtonsSelection(phones) {\n    return phones.every(phone => phone.isChecked === true);\n  }\n\n  handleDoubleClick = (id, title) => {\n    this.setState(state => {\n      const phones = [...state.phones];\n      const itemIndex = phones.findIndex( phone => phone.id === id);\n\n      phones[itemIndex] = {\n        ...phones[itemIndex],\n        editableField: title,\n      };\n\n      return {\n        phones,\n      }\n    });\n  };\n\n  handleSubmitEditing = (id, title, value, wasEdit) => {\n    this.setState(state => {\n      const phones = [...state.phones];\n      const itemIndex = phones.findIndex( phone => phone.id === id);\n\n      phones[itemIndex] = {\n        ...phones[itemIndex],\n        [title]: wasEdit ? value : phones[itemIndex][title],\n        editableField: null,\n      };\n\n      return {\n        phones,\n      }\n    });\n  };\n\n  handleEditableBlockBlur = (id) => {\n    this.setState(state => {\n      const phones = [...state.phones];\n      const itemIndex = phones.findIndex( phone => phone.id === id);\n\n      phones[itemIndex] = {\n        ...phones[itemIndex],\n        editableField: null,\n      };\n\n      return {\n        phones,\n      }\n    });\n  };\n\n  render() {\n    const phones = this.getFilteredPhones();\n    const currentPagePhones = this.getCurrentPagePhones(phones);\n    const allChecked = this.checkAllButtonsSelection(currentPagePhones);\n\n    return (\n      <React.Fragment>\n        <Header\n          onFilterInput={this.onFilterInput}\n          handleSelectedButtonClick={this.handleSelectedButtonClick}\n          showSelectedButtonIsActive={this.state.showSelected}\n        />\n        <Main\n          perPage={this.state.perPage}\n          handlePaginationSelector={this.handlePaginationSelector}\n          config={columnConfig}\n          phones={currentPagePhones}\n          togglePhoneCheckbox={this.togglePhoneCheckbox}\n          handleOrderClick={this.onOrderInput}\n          handleCheckAll={this.handleCheckAll}\n          checkedAll={allChecked}\n          handleDoubleClick={this.handleDoubleClick}\n          handleSubmitEditing={this.handleSubmitEditing}\n          handleEditableBlockBlur={this.handleEditableBlockBlur}\n        />\n        <PaginationButtons\n          totalPhonesCount={phones.length}\n          currentPage={this.state.currentPage}\n          perPage={this.state.perPage}\n          handleClick={this.selectPage}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}