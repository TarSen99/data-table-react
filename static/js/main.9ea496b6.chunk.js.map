{"version":3,"sources":["components/Filter.js","components/CheckedItemsButtons.js","components/Header.js","components/TableContext.js","components/PaginationSelector.js","components/Main.js","components/PaginationButtons.js","components/config.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","react_default","a","createElement","className","type","onChange","onFilterInput","placeholder","CheckedItemsButtons","_ref","handleSelectedButtonClick","showSelectedButtonIsActive","classNames","button-active","onClick","Header","components_Filter","components_CheckedItemsButtons","TableContext","React","createContext","PaginationSelector","components_TableContext","Consumer","data","handlePaginationSelector","perPage","value","Main","Content","handleCheckAll","checkedAll","config","handleOrderClick","checked","components_PaginationSelector","Object","entries","map","_ref2","slicedToArray","key","sortableTitleClassName","main__table-sortable","phones","togglePhoneCheckbox","phone","id","isChecked","keys","title","editableBlock","Main_Main","EditableBlock","Cell","_ref3","editableFormValue","wasEdit","onFieldChange","event","target","handleEditableBlockBlur","handleSubmitEditing","autoFocus","defaultValue","onBlur","onKeyDown","e","keyCode","onMouseDown","_ref4","handleDoubleClick","editable-block","imageContent","src","concat","alt","onDoubleClick","editableField","PaginationButtons","totalPhonesCount","currentPage","handleClick","handleArrowClick","maxPage","newPage","Math","max","min","buttonsCount","ceil","buttons","count","i","push","generateButtons","firstItem","lastItem","disabled","button","buttonClassName","columnConfig","imageUrl","hasImage","name","isSortable","isSearchable","snippet","isEditable","age","App","state","order","orderBy","filterValue","showSelected","toConsumableArray","_this","phoneIndex","findIndex","objectSpread","setState","onOrderInput","newOrder","getNewOrder","selectPage","page","filteredPhones","getFilteredPhones","newPhones","getCurrentPagePhones","forEach","index","searchedPhone","itemIndex","_objectSpread2","defineProperty","_this2","this","fetch","then","response","json","dataWithCheckbox","addIsCheckedProperty","dataWithEditableField","addCurrentEditableField","items","item","sort","itemA","itemB","searchableParams","param","hasOwnProperty","_this$state","filterValueLower","toLowerCase","getSearchableParams","filter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","includes","err","return","filteredBySelection","filterBySelection","sortItems","_this3","_this$state2","every","allChecked","currentPagePhones","checkAllButtonsSelection","settings","getSettings","Provider","Fragment","components_Header","components_Main","components_PaginationButtons","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ea496b6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Filter = (props) => (\r\n  <div className=\"header__input\">\r\n    <input\r\n      type=\"text\"\r\n      onChange={props.onFilterInput}\r\n      placeholder=\"search...\"\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default Filter;","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst CheckedItemsButtons = ({ handleSelectedButtonClick, showSelectedButtonIsActive }) => (\r\n  <div className=\"header__buttons\">\r\n    <button\r\n      className={classNames('button', {\r\n        'button-active': showSelectedButtonIsActive === false\r\n      })}\r\n      onClick={() => handleSelectedButtonClick(false)}\r\n    >\r\n      Show all\r\n    </button>\r\n    <button\r\n      className={classNames('button', {\r\n        'button-active': showSelectedButtonIsActive === true\r\n      })}\r\n      onClick={() => handleSelectedButtonClick(true)}\r\n    >\r\n      Show selected\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default CheckedItemsButtons;","import React from 'react';\r\nimport Filter from './Filter';\r\nimport CheckedItemsButtons from './CheckedItemsButtons';\r\n\r\nconst Header = ({onFilterInput, handleSelectedButtonClick, showSelectedButtonIsActive}) => (\r\n    <header className=\"header\">\r\n      <div className=\"container\">\r\n        <div className=\"header__content\">\r\n          <div className=\"header__logo\">\r\n            phones.ua\r\n          </div>\r\n          <Filter\r\n            onFilterInput={onFilterInput}\r\n          />\r\n          <CheckedItemsButtons\r\n            handleSelectedButtonClick={handleSelectedButtonClick}\r\n            showSelectedButtonIsActive={showSelectedButtonIsActive}\r\n          />\r\n        </div>\r\n      </div>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst TableContext = React.createContext();\r\n\r\nexport default TableContext;","import React from 'react';\r\nimport TableContext from './TableContext';\r\n\r\nconst PaginationSelector = () => {\r\n  return (\r\n    <TableContext.Consumer>\r\n      {\r\n        data => {\r\n          const {handlePaginationSelector, perPage} = data;\r\n\r\n          return (\r\n            <div className=\"pagination__selector\">\r\n              <select\r\n                onChange={handlePaginationSelector}\r\n                value={perPage}\r\n              >\r\n                <option value=\"3\">3</option>\r\n                <option value=\"5\">5</option>\r\n                <option value=\"10\">10</option>\r\n                <option value=\"15\">15</option>\r\n                <option value=\"20\">20</option>\r\n              </select>\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n    </TableContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default PaginationSelector;","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport TableContext from './TableContext'\r\n\r\nimport PaginationSelector from \"./PaginationSelector\";\r\n\r\nconst IMAGE_BASE = 'https://raw.githubusercontent.com/TarSen99/DataTableComponent/master/';\r\n\r\nconst Main = () => (\r\n  <main className=\"main\">\r\n    <div className=\"container\">\r\n      <table className=\"main__table\">\r\n        <Main.Header />\r\n        <Main.Content />\r\n      </table>\r\n    </div>\r\n  </main>\r\n);\r\n\r\nMain.Header = () => (\r\n  <TableContext.Consumer>\r\n    {data => {\r\n      const {handleCheckAll, checkedAll, config, handleOrderClick} = data;\r\n\r\n      return (\r\n        <thead>\r\n          <tr>\r\n            <th>\r\n              <input\r\n                type=\"checkbox\"\r\n                onChange={handleCheckAll}\r\n                checked={checkedAll}\r\n              />\r\n              <PaginationSelector />\r\n            </th>\r\n            {\r\n              Object.entries(config).map(([key, value]) => {\r\n                const sortableTitleClassName = classNames({\r\n                  'main__table-sortable': value['isSortable']\r\n                });\r\n\r\n                return (\r\n                  <th\r\n                    key={key}\r\n                    className={sortableTitleClassName}\r\n                    onClick={value['isSortable'] ? () => handleOrderClick(key) : null }\r\n                  >\r\n                    {value['title']}\r\n                  </th>\r\n                );\r\n              })\r\n            }\r\n          </tr>\r\n        </thead>\r\n        );\r\n      }\r\n    }\r\n  </TableContext.Consumer>\r\n);\r\n\r\nMain.Content = () => (\r\n  <TableContext.Consumer>\r\n    {\r\n      data => {\r\n        const {phones, togglePhoneCheckbox, config } = data;\r\n\r\n        return (\r\n          <tbody>\r\n          {\r\n            phones.map(phone => {\r\n              return (\r\n                <tr key={phone.id}>\r\n                  <th>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={phone.isChecked}\r\n                      onChange={() => togglePhoneCheckbox(phone.id)}\r\n                    />\r\n                  </th>\r\n                  {Object.keys(config).map(title => {\r\n                    const editableBlock =\r\n                      (\r\n                        <Main.EditableBlock\r\n                          title={title}\r\n                          phone={phone}\r\n                        />\r\n                      );\r\n\r\n                    return (\r\n                      <Main.Cell\r\n                        key={title}\r\n                        title={title}\r\n                        phone={phone}\r\n                        editableBlock={editableBlock}\r\n                      />\r\n                    )\r\n                  })}\r\n                </tr>\r\n              );\r\n            })\r\n          }\r\n          </tbody>\r\n        );\r\n      }\r\n    }\r\n  </TableContext.Consumer>\r\n);\r\n\r\nMain.EditableBlock = ({phone, title }) => {\r\n  let editableFormValue = phone[title];\r\n  let wasEdit = false;\r\n\r\n  const onFieldChange = (event) => {\r\n    editableFormValue = event.target.value;\r\n    wasEdit = true;\r\n  };\r\n\r\n  return (\r\n    <TableContext.Consumer>\r\n      {data => {\r\n        const {handleEditableBlockBlur, handleSubmitEditing} = data;\r\n\r\n        return (\r\n          <div>\r\n            <textarea\r\n              autoFocus\r\n              defaultValue={editableFormValue}\r\n              onChange={onFieldChange}\r\n              onBlur={() => handleEditableBlockBlur(phone.id)}\r\n              onKeyDown={(e) => e.keyCode === 13 ?\r\n                handleSubmitEditing(phone.id, title, editableFormValue, wasEdit) : null}\r\n              className=\"editable-block__text\"\r\n            />\r\n            <button\r\n              className=\"editable-block__button button\"\r\n              onMouseDown={() => handleSubmitEditing(phone.id, title, editableFormValue, wasEdit)}\r\n            >\r\n              OK\r\n            </button>\r\n          </div>\r\n        );\r\n      }}\r\n    </TableContext.Consumer>\r\n  )\r\n};\r\n\r\nMain.Cell = ({ title, phone, editableBlock }) => {\r\n  return (\r\n    <TableContext.Consumer>\r\n      {\r\n        data => {\r\n          const {config, handleDoubleClick} = data;\r\n          const className = classNames({\r\n            'editable-block': config[title]['isEditable']\r\n          });\r\n\r\n          const imageContent = (\r\n            <img\r\n              src={`${IMAGE_BASE}${phone[title]}`}\r\n              alt={title}\r\n            />\r\n          );\r\n\r\n          return (\r\n            <td\r\n              key={title}\r\n              onDoubleClick={config[title]['isEditable']\r\n                ? () => handleDoubleClick(phone.id, title) : null}\r\n              className={className}\r\n            >\r\n              {\r\n                (phone.editableField === title && editableBlock) ||\r\n                (config[title]['hasImage']\r\n                  ? imageContent : phone[title])\r\n              }\r\n            </td>\r\n          );\r\n        }\r\n      }\r\n    </TableContext.Consumer>\r\n  )\r\n};\r\n\r\nexport default Main;","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst PaginationButtons = ({totalPhonesCount, currentPage, perPage, handleClick}) => {\r\n  const generateButtons = (count) => {\r\n    const buttons = [];\r\n\r\n    for(let i = 0; i < count; i++) {\r\n      buttons.push(i);\r\n    }\r\n\r\n    return buttons;\r\n  };\r\n\r\n  const getButtonsCount = () => {\r\n    return Math.ceil(totalPhonesCount / perPage);\r\n  };\r\n\r\n  const handleArrowClick = (value, maxPage) => {\r\n    let newPage = currentPage + value;\r\n\r\n    newPage = Math.max(0, newPage);\r\n    newPage = Math.min((maxPage - 1), newPage);\r\n\r\n    if(newPage === currentPage) {\r\n      return;\r\n    }\r\n\r\n    handleClick(newPage);\r\n  };\r\n\r\n  const buttonsCount = getButtonsCount();\r\n  const buttons = generateButtons(buttonsCount);\r\n\r\n  const firstItem = Math.min((currentPage * perPage + 1), totalPhonesCount);\r\n  const lastItem = Math.min((currentPage * perPage + perPage), totalPhonesCount);\r\n\r\n  return (\r\n    <div className=\"pagination\">\r\n      <div className=\"container\">\r\n        <div className=\"pagination__block\">\r\n          <div className=\"pagination__text\">\r\n            <span className=\"pagination__current-items\">\r\n              {\r\n                `${firstItem} - ${lastItem} `\r\n              }\r\n            </span>\r\n            of\r\n            <span className=\"pagination__total-items\">\r\n              {` ${totalPhonesCount}`}\r\n            </span>\r\n          </div>\r\n          <div className=\"pagination__buttons\">\r\n            <button\r\n              onClick={() => handleArrowClick(-1, buttonsCount)}\r\n              className=\"pagination__arrow button\"\r\n              disabled={currentPage === 0}\r\n            >\r\n              {'<'}\r\n            </button>\r\n            {\r\n              buttons.map((button) => {\r\n                const buttonClassName = classNames('button', {\r\n                  'button-active': button === currentPage\r\n                });\r\n\r\n                return (\r\n                  <button\r\n                    key={button}\r\n                    onClick={() => handleClick(button)}\r\n                    className={buttonClassName}\r\n                  >\r\n                    {button + 1}\r\n                  </button>\r\n                );\r\n              })\r\n            }\r\n            <button\r\n              onClick={() => handleArrowClick(1, buttonsCount)}\r\n              className=\"pagination__arrow button\"\r\n              disabled={currentPage === Math.max((buttonsCount - 1), 0)}\r\n            >\r\n              {'>'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaginationButtons;","const columnConfig = {\r\n  imageUrl: {\r\n    hasImage: true,\r\n  },\r\n  name: {\r\n    title: 'Name',\r\n    isSortable: true,\r\n    isSearchable: true,\r\n  },\r\n  snippet: {\r\n    title: 'Description',\r\n    isSearchable: true,\r\n    isEditable: true,\r\n  },\r\n  age: {\r\n    title: 'Age',\r\n    isSortable: true,\r\n  },\r\n};\r\n\r\nexport default columnConfig;","import React, {Component} from 'react';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport PaginationButtons from './components/PaginationButtons';\nimport columnConfig from './components/config';\nimport TableContext from './components/TableContext';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    phones: [],\n    order: 'DESC',\n    orderBy: '',\n    filterValue: '',\n    currentPage: 0,\n    perPage: 3,\n    showSelected: false,\n  };\n\n  componentDidMount() {\n    fetch('https://mate-academy.github.io/phone-catalogue-static/phones/phones.json')\n      .then(response => response.json())\n      .then(data => {\n        const dataWithCheckbox = this.addIsCheckedProperty(data);\n        const dataWithEditableField = this.addCurrentEditableField(dataWithCheckbox);\n\n        this.setState({\n          phones: dataWithEditableField,\n        })\n      });\n  }\n\n  addIsCheckedProperty(items) {\n    return items.map(item => (\n      {\n        ...item,\n        isChecked: false,\n      }\n    ));\n  }\n\n  addCurrentEditableField(items) {\n    return items.map(item => (\n      {\n        ...item,\n        editableField: null,\n      }\n    ));\n  }\n\n  togglePhoneCheckbox = (id) => {\n    const phones = [...this.state.phones];\n    const phoneIndex = phones.findIndex(phone => phone.id === id);\n\n    phones[phoneIndex] = {\n      ...phones[phoneIndex],\n      isChecked: !phones[phoneIndex].isChecked,\n    };\n\n    this.setState({\n      phones,\n    });\n  };\n\n  onOrderInput = (orderBy) => {\n    const newOrder = this.state.orderBy === orderBy\n      ? this.getNewOrder() : this.state.order;\n\n    this.setState({\n      order: newOrder,\n      orderBy: orderBy,\n    });\n  };\n\n  getNewOrder() {\n    return this.state.order === 'ASC' ? 'DESC' : 'ASC';\n  }\n\n  sortItems(phones, orderBy, order) {\n    return phones.sort((itemA, itemB) => {\n      if (order === 'ASC') {\n        return itemA[orderBy] > itemB[orderBy] ? 1 : -1\n      }\n\n      return itemA[orderBy] > itemB[orderBy] ? -1 : 1\n    });\n  }\n\n  onFilterInput = (event) => {\n    const filterValue = event.target.value;\n\n    this.setState({\n      currentPage: 0,\n      filterValue,\n    });\n  };\n\n  getSearchableParams(config) {\n    const searchableParams = [];\n\n    for(let param in config) {\n      if(!config.hasOwnProperty(param)) {\n        return;\n      }\n\n      if(columnConfig[param]['isSearchable']) {\n        searchableParams.push(param);\n      }\n    }\n\n    return searchableParams;\n  }\n\n  getFilteredPhones() {\n    const {phones, filterValue, orderBy, order} = this.state;\n    const filterValueLower = filterValue.toLowerCase();\n    const searchableParams = this.getSearchableParams(columnConfig);\n\n    const filteredPhones = phones.filter(phone => {\n      for(let searchableParam of searchableParams) {\n        if(phone[searchableParam].toLowerCase().includes(filterValueLower)) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n\n    const filteredBySelection = this.filterBySelection(filteredPhones);\n    const orderedPhones = this.sortItems(filteredBySelection, orderBy, order);\n\n    return orderedPhones;\n  }\n\n  filterBySelection(phones) {\n    if(this.state.showSelected === false) {\n      return phones;\n    }\n\n    return phones.filter(phone => {\n      return phone.isChecked === this.state.showSelected;\n    });\n  }\n\n  getCurrentPagePhones(phones) {\n    const {currentPage, perPage} = this.state;\n\n    return phones.filter((phone, index) => {\n      return index >= currentPage * perPage && index < currentPage * perPage + perPage\n    });\n  }\n\n  selectPage = (page) => {\n    this.setState({\n      currentPage: page,\n    })\n  };\n\n  handlePaginationSelector = (event) => {\n    const perPage = +event.target.value;\n\n    this.setState({\n      currentPage: 0,\n      perPage\n    })\n  };\n\n  handleSelectedButtonClick = (value) => {\n    this.setState({\n      currentPage: 0,\n      showSelected: value,\n    });\n  };\n\n  handleCheckAll = (event) => {\n    const value = event.target.checked;\n\n    const filteredPhones = this.getFilteredPhones();\n    const currentPagePhones = [...this.getCurrentPagePhones(filteredPhones)];\n\n    const newPhones = currentPagePhones.map(phone => {\n      return {\n        ...phone,\n        isChecked: value,\n      }\n    });\n\n    this.setState(state => {\n      const phones = [...state.phones];\n      newPhones.forEach(({ id, isChecked }) => {\n        const index = phones.findIndex(searchedPhone => searchedPhone.id === id);\n\n        phones[index] = {\n          ...phones[index],\n          isChecked,\n        }\n      });\n\n      return {\n        phones,\n      }\n    });\n  };\n\n  checkAllButtonsSelection(phones) {\n    return phones.every(phone => phone.isChecked === true);\n  }\n\n  handleDoubleClick = (id, title) => {\n    this.setState(state => {\n      const phones = [...state.phones];\n      const itemIndex = phones.findIndex( phone => phone.id === id);\n\n      phones[itemIndex] = {\n        ...phones[itemIndex],\n        editableField: title,\n      };\n\n      return {\n        phones,\n      }\n    });\n  };\n\n  handleSubmitEditing = (id, title, value, wasEdit) => {\n    this.setState(state => {\n      const phones = [...state.phones];\n      const itemIndex = phones.findIndex( phone => phone.id === id);\n\n      phones[itemIndex] = {\n        ...phones[itemIndex],\n        [title]: wasEdit ? value : phones[itemIndex][title],\n        editableField: null,\n      };\n\n      return {\n        phones,\n      }\n    });\n  };\n\n  handleEditableBlockBlur = (id) => {\n    this.setState(state => {\n      const phones = [...state.phones];\n      const itemIndex = phones.findIndex( phone => phone.id === id);\n\n      phones[itemIndex] = {\n        ...phones[itemIndex],\n        editableField: null,\n      };\n\n      return {\n        phones,\n      }\n    });\n  };\n\n  getSettings(phones, allChecked) {\n    return {\n      perPage: this.state.perPage,\n      handlePaginationSelector: this.handlePaginationSelector,\n      config: columnConfig,\n      phones: phones,\n      togglePhoneCheckbox: this.togglePhoneCheckbox,\n      handleOrderClick: this.onOrderInput,\n      handleCheckAll: this.handleCheckAll,\n      checkedAll: allChecked,\n      handleDoubleClick: this.handleDoubleClick,\n      handleSubmitEditing: this.handleSubmitEditing,\n      handleEditableBlockBlur: this.handleEditableBlockBlur,\n    };\n  }\n\n  render() {\n    const phones = this.getFilteredPhones();\n    const currentPagePhones = this.getCurrentPagePhones(phones);\n    const allChecked = this.checkAllButtonsSelection(currentPagePhones);\n\n    const settings = this.getSettings(currentPagePhones, allChecked);\n\n    return (\n      <TableContext.Provider value={settings}>\n        <React.Fragment>\n          <Header\n            onFilterInput={this.onFilterInput}\n            handleSelectedButtonClick={this.handleSelectedButtonClick}\n            showSelectedButtonIsActive={this.state.showSelected}\n          />\n          <Main />\n          <PaginationButtons\n            totalPhonesCount={phones.length}\n            currentPage={this.state.currentPage}\n            perPage={this.state.perPage}\n            handleClick={this.selectPage}\n          />\n        </React.Fragment>\n      </TableContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}