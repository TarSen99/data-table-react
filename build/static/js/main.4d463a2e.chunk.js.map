{"version":3,"sources":["components/Filter.js","components/CheckedItemsButtons.js","components/Header.js","components/PaginationSelector.js","components/Main.js","components/PaginationButtons.js","components/config.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","react_default","a","createElement","className","type","onChange","onFilterInput","placeholder","CheckedItemsButtons","_ref","handleSelectedButtonClick","showSelectedButtonIsActive","classNames","button-active","onClick","Header","components_Filter","components_CheckedItemsButtons","PaginationSelector","handlePaginationSelector","perPage","value","Main","checkedAll","handleCheckAll","phones","handleOrderClick","togglePhoneCheckbox","config","Content","map","phone","key","id","checked","isChecked","Object","keys","title","src","concat","alt","_ref2","components_PaginationSelector","entries","_ref3","_ref4","slicedToArray","sortableTitleClassName","main__table-sortable","PaginationButtons","totalPhonesCount","currentPage","handleClick","handleArrowClick","maxPage","newPage","Math","max","min","buttonsCount","ceil","buttons","count","i","push","generateButtons","firstItem","lastItem","disabled","button","buttonClassName","columnConfig","imageUrl","hasImage","name","isSortable","isSearchable","snippet","age","App","state","order","orderBy","filterValue","showSelected","toConsumableArray","_this","phoneIndex","findIndex","objectSpread","setState","onOrderInput","newOrder","getNewOrder","event","target","selectPage","page","filteredPhones","getFilteredPhones","newPhones","getCurrentPagePhones","forEach","index","searchedPhone","_this2","this","fetch","then","response","json","data","dataWithCheckbox","item","sort","itemA","itemB","searchableParams","param","hasOwnProperty","_this$state","filterValueLower","toLowerCase","getSearchableParams","filter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","includes","err","return","filteredBySelection","filterBySelection","sortItems","_this3","_this$state2","every","currentPagePhones","allChecked","checkAllButtonsSelection","Fragment","components_Header","components_Main","components_PaginationButtons","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d463a2e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Filter = (props) => (\r\n  <div className=\"header__input\">\r\n    <input\r\n      type=\"text\"\r\n      onChange={props.onFilterInput}\r\n      placeholder=\"search...\"\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default Filter;","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst CheckedItemsButtons = ({ handleSelectedButtonClick, showSelectedButtonIsActive }) => (\r\n  <div className=\"header__buttons\">\r\n    <button\r\n      className={classNames('button', {\r\n        'button-active': showSelectedButtonIsActive === false\r\n      })}\r\n      onClick={() => handleSelectedButtonClick(false)}\r\n    >\r\n      Show all\r\n    </button>\r\n    <button\r\n      className={classNames('button', {\r\n        'button-active': showSelectedButtonIsActive === true\r\n      })}\r\n      onClick={() => handleSelectedButtonClick(true)}\r\n    >\r\n      Show selected\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default CheckedItemsButtons;","import React from 'react';\r\nimport Filter from './Filter';\r\nimport CheckedItemsButtons from './CheckedItemsButtons';\r\n\r\nconst Header = ({onFilterInput, handleSelectedButtonClick, showSelectedButtonIsActive}) => (\r\n    <header className=\"header\">\r\n      <div className=\"container\">\r\n        <div className=\"header__content\">\r\n          <div className=\"header__logo\">\r\n            phones.ua\r\n          </div>\r\n          <Filter\r\n            onFilterInput={onFilterInput}\r\n          />\r\n          <CheckedItemsButtons\r\n            handleSelectedButtonClick={handleSelectedButtonClick}\r\n            showSelectedButtonIsActive={showSelectedButtonIsActive}\r\n          />\r\n        </div>\r\n      </div>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst PaginationSelector = ({ handlePaginationSelector, perPage }) => {\r\n  return (\r\n    <div className=\"pagination__selector\">\r\n        <select\r\n          onChange={handlePaginationSelector}\r\n          value={perPage}\r\n        >\r\n          <option value=\"3\">3</option>\r\n          <option value=\"5\">5</option>\r\n          <option value=\"10\">10</option>\r\n          <option value=\"15\">15</option>\r\n          <option value=\"20\">20</option>\r\n        </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaginationSelector;","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport PaginationSelector from \"./PaginationSelector\";\r\n\r\nconst IMAGE_BASE = 'https://raw.githubusercontent.com/TarSen99/DataTableComponent/master/';\r\n\r\nconst Main = ({\r\n                checkedAll,\r\n                handleCheckAll,\r\n                phones,\r\n                handleOrderClick,\r\n                togglePhoneCheckbox,\r\n                config,\r\n                handlePaginationSelector,\r\n                perPage\r\n}) => (\r\n  <main className=\"main\">\r\n    <div className=\"container\">\r\n      <table className=\"main__table\">\r\n        <Main.Header\r\n          checkedAll={checkedAll}\r\n          handlePaginationSelector={handlePaginationSelector}\r\n          config={config}\r\n          handleOrderClick={handleOrderClick}\r\n          perPage={perPage}\r\n          handleCheckAll={handleCheckAll}\r\n        />\r\n        <Main.Content\r\n          config={config}\r\n          phones={phones}\r\n          togglePhoneCheckbox={togglePhoneCheckbox}\r\n        />\r\n      </table>\r\n    </div>\r\n  </main>\r\n);\r\n\r\nMain.Content = (props) => {\r\n  return (\r\n    <tbody>\r\n      {\r\n        props.phones.map(phone => {\r\n          return (\r\n            <tr key={phone.id}>\r\n              <th>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={phone.isChecked}\r\n                  onChange={() => props.togglePhoneCheckbox(phone.id)}\r\n                />\r\n              </th>\r\n              {Object.keys(props.config).map(title => (\r\n                <td key={title}>\r\n                  {props.config[title]['hasImage']\r\n                    ? <img src={`${IMAGE_BASE}${phone[title]}`} alt=\"\" />\r\n                    : phone[title]}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          );\r\n        })\r\n      }\r\n    </tbody>\r\n  );\r\n};\r\n\r\nMain.Header = ({checkedAll, handlePaginationSelector, config, handleOrderClick, perPage, handleCheckAll}) => (\r\n  <thead>\r\n    <tr>\r\n      <th>\r\n        <input\r\n          type=\"checkbox\"\r\n          onChange={handleCheckAll}\r\n          checked={checkedAll}\r\n        />\r\n        <PaginationSelector\r\n          handlePaginationSelector={handlePaginationSelector}\r\n          perPage={perPage}\r\n        />\r\n      </th>\r\n      {\r\n        Object.entries(config).map(([key, value]) => {\r\n          const sortableTitleClassName = classNames({\r\n            'main__table-sortable': value['isSortable']\r\n          });\r\n\r\n          return (\r\n            <th\r\n              key={key}\r\n              className={sortableTitleClassName}\r\n              onClick={value['isSortable'] ? () => handleOrderClick(key) : null }\r\n            >\r\n              {value['title']}\r\n            </th>\r\n          );\r\n        })\r\n      }\r\n    </tr>\r\n  </thead>\r\n);\r\n\r\nexport default Main;","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst PaginationButtons = ({totalPhonesCount, currentPage, perPage, handleClick}) => {\r\n  const generateButtons = (count) => {\r\n    const buttons = [];\r\n\r\n    for(let i = 0; i < count; i++) {\r\n      buttons.push(i);\r\n    }\r\n\r\n    return buttons;\r\n  };\r\n\r\n  const getButtonsCount = () => {\r\n    return Math.ceil(totalPhonesCount / perPage);\r\n  };\r\n\r\n  const handleArrowClick = (value, maxPage) => {\r\n    let newPage = currentPage + value;\r\n\r\n    newPage = Math.max(0, newPage);\r\n    newPage = Math.min((maxPage - 1), newPage);\r\n\r\n    if(newPage === currentPage) {\r\n      return;\r\n    }\r\n\r\n    handleClick(newPage);\r\n  };\r\n\r\n  const buttonsCount = getButtonsCount();\r\n  const buttons = generateButtons(buttonsCount);\r\n\r\n  const firstItem = Math.min((currentPage * perPage + 1), totalPhonesCount);\r\n  const lastItem = Math.min((currentPage * perPage + perPage), totalPhonesCount);\r\n\r\n  return (\r\n    <div className=\"pagination\">\r\n      <div className=\"container\">\r\n        <div className=\"pagination__block\">\r\n          <div className=\"pagination__text\">\r\n            <span className=\"pagination__current-items\">\r\n              {\r\n                `${firstItem} - ${lastItem} `\r\n              }\r\n            </span>\r\n            of\r\n            <span className=\"pagination__total-items\">\r\n              {` ${totalPhonesCount}`}\r\n            </span>\r\n          </div>\r\n          <div className=\"pagination__buttons\">\r\n            <button\r\n              onClick={() => handleArrowClick(-1, buttonsCount)}\r\n              className=\"pagination__arrow button\"\r\n              disabled={currentPage === 0}\r\n            >\r\n              {'<'}\r\n            </button>\r\n            {\r\n              buttons.map((button) => {\r\n                const buttonClassName = classNames('button', {\r\n                  'button-active': button === currentPage\r\n                });\r\n\r\n                return (\r\n                  <button\r\n                    key={button}\r\n                    onClick={() => handleClick(button)}\r\n                    className={buttonClassName}\r\n                  >\r\n                    {button + 1}\r\n                  </button>\r\n                );\r\n              })\r\n            }\r\n            <button\r\n              onClick={() => handleArrowClick(1, buttonsCount)}\r\n              className=\"pagination__arrow button\"\r\n              disabled={currentPage === Math.max((buttonsCount - 1), 0)}\r\n            >\r\n              {'>'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaginationButtons;","const columnConfig = {\r\n  imageUrl: {\r\n    hasImage: true,\r\n  },\r\n  name: {\r\n    title: 'Name', // в таблице колонка будет так называться\r\n    isSortable: true, // Поиск будет проверять эту и последнюю колонки\r\n    isSearchable: true,\r\n  },\r\n  snippet: { // Только для тех ключей которые есть в columnConfig будут колонки в таблице\r\n    title: 'Description',\r\n    isSearchable: true, // В этой колонке тоже будет происходить поиск query\r\n  },\r\n  age: {\r\n    title: 'Age',\r\n    isSortable: true, // по этой колонке можно сортировать\r\n  },\r\n};\r\n\r\nexport default columnConfig;","import React, {Component} from 'react';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport PaginationButtons from './components/PaginationButtons';\nimport columnConfig from './components/config';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    phones: [],\n    order: 'DESC',\n    orderBy: '',\n    filterValue: '',\n    currentPage: 0,\n    perPage: 3,\n    showSelected: false,\n  };\n\n  componentDidMount() {\n    fetch('https://mate-academy.github.io/phone-catalogue-static/phones/phones.json')\n      .then(response => response.json())\n      .then(data => {\n        const dataWithCheckbox = data.map(item => (\n          {\n            ...item,\n            isChecked: false,\n          }\n        ));\n\n        this.setState({\n          phones: dataWithCheckbox,\n          filteredPhones: dataWithCheckbox,\n        })\n      });\n  }\n\n  togglePhoneCheckbox = (id) => {\n    const phones = [...this.state.phones];\n    const phoneIndex = phones.findIndex(phone => phone.id === id);\n\n    phones[phoneIndex] = {\n      ...phones[phoneIndex],\n      isChecked: !phones[phoneIndex].isChecked,\n    };\n\n    this.setState({\n      phones,\n    });\n  };\n\n  onOrderInput = (orderBy) => {\n    const newOrder = this.state.orderBy === orderBy\n      ? this.getNewOrder() : this.state.order;\n\n    this.setState({\n      order: newOrder,\n      orderBy: orderBy,\n    });\n  };\n\n  getNewOrder() {\n    return this.state.order === 'ASC' ? 'DESC' : 'ASC';\n  }\n\n  sortItems(phones, orderBy, order) {\n    return phones.sort((itemA, itemB) => {\n      if (order === 'ASC') {\n        return itemA[orderBy] > itemB[orderBy] ? 1 : -1\n      }\n\n      return itemA[orderBy] > itemB[orderBy] ? -1 : 1\n    });\n  }\n\n  onFilterInput = (event) => {\n    const filterValue = event.target.value;\n\n    this.setState({\n      currentPage: 0,\n      filterValue,\n    });\n  };\n\n  getSearchableParams(config) {\n    const searchableParams = [];\n\n    for(let param in config) {\n      if(!config.hasOwnProperty(param)) {\n        return;\n      }\n\n      if(columnConfig[param]['isSearchable']) {\n        searchableParams.push(param);\n      }\n    }\n\n    return searchableParams;\n  }\n\n  getFilteredPhones() {\n    const {phones, filterValue, orderBy, order} = this.state;\n    const filterValueLower = filterValue.toLowerCase();\n    const searchableParams = this.getSearchableParams(columnConfig);\n\n    const filteredPhones = phones.filter(phone => {\n      for(let searchableParam of searchableParams) {\n        if(phone[searchableParam].toLowerCase().includes(filterValueLower)) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n\n    const filteredBySelection = this.filterBySelection(filteredPhones);\n    const orderedPhones = this.sortItems(filteredBySelection, orderBy, order);\n\n    return orderedPhones;\n  }\n\n  filterBySelection(phones) {\n    if(this.state.showSelected === false) {\n      return phones;\n    }\n\n    return phones.filter(phone => {\n      return phone.isChecked === this.state.showSelected;\n    });\n  }\n\n  getCurrentPagePhones(phones) {\n    const {currentPage, perPage} = this.state;\n\n    return phones.filter((phone, index) => {\n      return index >= currentPage * perPage && index < currentPage * perPage + perPage\n    });\n  }\n\n  selectPage = (page) => {\n    this.setState({\n      currentPage: page,\n    })\n  };\n\n  handlePaginationSelector = (event) => {\n    const perPage = event.target.value;\n\n    this.setState({\n      currentPage: 0,\n      perPage\n    })\n  };\n\n  handleSelectedButtonClick = (value) => {\n    this.setState({\n      currentPage: 0,\n      showSelected: value,\n    });\n  };\n\n  handleCheckAll = (event) => {\n    const value = event.target.checked;\n\n    const filteredPhones = this.getFilteredPhones();\n    const currentPagePhones = [...this.getCurrentPagePhones(filteredPhones)];\n\n    const newPhones = currentPagePhones.map(phone => {\n      return {\n        ...phone,\n        isChecked: value,\n      }\n    });\n\n    const phones = [...this.state.phones];\n    newPhones.forEach(({ id, isChecked }) => {\n      const index = phones.findIndex(searchedPhone => searchedPhone.id === id);\n\n      phones[index] = {\n        ...phones[index],\n        isChecked,\n      }\n    });\n\n    this.setState({\n      phones,\n    });\n  };\n\n  checkAllButtonsSelection(phones) {\n    return phones.every(phone => phone.isChecked === true);\n  }\n\n  render() {\n    const phones = this.getFilteredPhones();\n    const currentPagePhones = this.getCurrentPagePhones(phones);\n    const allChecked = this.checkAllButtonsSelection(currentPagePhones);\n\n    return (\n      <React.Fragment>\n        <Header\n          onFilterInput={this.onFilterInput}\n          handleSelectedButtonClick={this.handleSelectedButtonClick}\n          showSelectedButtonIsActive={this.state.showSelected}\n        />\n        <Main\n          perPage={this.state.perPage}\n          handlePaginationSelector={this.handlePaginationSelector}\n          config={columnConfig}\n          phones={currentPagePhones}\n          togglePhoneCheckbox={this.togglePhoneCheckbox}\n          handleOrderClick={this.onOrderInput}\n          handleCheckAll={this.handleCheckAll}\n          checkedAll={allChecked}\n        />\n        <PaginationButtons\n          totalPhonesCount={phones.length}\n          currentPage={this.state.currentPage}\n          perPage={this.state.perPage}\n          handleClick={this.selectPage}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}